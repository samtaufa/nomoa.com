<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
  <head>
    <title>=8> nomoa.com/bsd OpenBSD - Samba file and printer sharing with MS Windows
    </title>
    <link rel="STYLESHEET" type="text/css" href="openbsd.css">
<script language="JavaScript">
<!--

function newImage(arg) {
	if (document.images) {
		rslt = new Image();
		rslt.src = arg;
		return rslt;
	}
}

function changeImages() {
	if (document.images && (preloadFlag == true)) {
		for (var i=0; i<changeImages.arguments.length; i+=2) {
			document[changeImages.arguments[i]].src = changeImages.arguments[i+1];
		}
	}
}

var preloadFlag = false;
function preloadImages() {
	if (document.images) {
		openbsd_over = newImage("mmedia/openbsd-over.gif");
		openbsd_down = newImage("mmedia/openbsd-down.gif");
		preloadFlag = true;
	}
}

// -->
</script>
<!-- End Preload Script -->
</head>

<body bgcolor="#FFFACD" onLoad="preloadImages();">
<p class="logo">
<a class="anchBlue" href="http://www.nomoa.com/bsd" 
   onMouseOver="changeImages('openbsd', 'mmedia/openbsd-over.gif'); return true;"
   onMouseOut="changeImages('openbsd', 'mmedia/openbsd.gif'); return true;"
   onMouseDown="changeImages('openbsd', 'mmedia/openbsd-down.gif'); return true;"
   onMouseUp="changeImages('openbsd', 'mmedia/openbsd-over.gif'); return true;">
   <img name="openbsd"  align="absMiddle" 
        alt="OpenBSD ... The Only way to Go ..." border="0" height="50"
        src="mmedia/openbsd.gif" width="368"></a>
</p>
    
<h1> Samba - sharing Files and Printers with MS Windows</h1>
<hr color="Fuchsia">
<p>Table of Contents</p>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#packaged">Installing the Packaged Version</a></li>
  <li><a href="#service">Starting samba with each reboot</a></li>
  <ul>
    <li><a href="#inetd">Starting through inetd</a></li>
  </ul>
  <li><a href="#test">Testing the installation</a></li>
  <li><a href="#swat">SWAT - The Samba Web Administration Tool</a></li>
  <li><a href="#smbadduser">Adding Users</a></li>
  <li><a href="#control">Controlling the Server</a></li>
  <li><a href="#winNT">Co-habiting with Windows NT PDC</a></li>
  <ul>
    <li><a href="#winNTadd">Adding the Samba Server to the Primary Domain Controller</a></li>
    <li><a href="#winNTjoin">Joining the Samba server to the Primary Domain Controller</a></li>
    <li><a href="#winNTupdate">Updating the /etc/samba/smb.conf</a></li>
  </ul>
  <li><a href="#sambaPDC" class="anchBlue">Authentication for NT, Win9X Workstations</a></li>
  <ul>
    <li><a href="#sambaPDCconf" class="anchBlue">Configuration File settings</a></li>
    <li><a href="#sambaPDCclient">Machine Account Creation</a></li>
  </ul>
  <li><a href="#stunnel">Using stunnel to secure SWAT password communications</a></li>
  <li><a href="#kernel" class="anchBlue">Optimizing the Kernel</a></li>
  <li>Getting at Windows Shares</li>
  <li><a href="#author">Author and Copyright</a></li>
</ul>
<hr color="Fuchsia">
<h2><a name="introduction"></a>Introduction</h2>
<p>The <a href="http://www.samba.org">Samba Suite</a> of programs allows you to 
  share Unix resources with SMB Clients (in many cases <a href="http://www.microsoft.com">MS 
  Windows</a> clients.) This significantly simplifies client access to OpenBSD 
  printing and file resources. Users on client machines access Samba resources 
  as they would any other (file/print) resource available from SMB servers such 
  as Windows NT or Windows 9x.</p>
<p>We use OpenBSD/Samba to allow our network users to use the same tools for accessing 
  their files on the OpenBSD/Samba box as they previously did when the same resources 
  were on the Win NT boxes. Users can open their files from within their applications 
  or use Windows Explorer to browse through the OpenBSD/Samba shares.</p>
<h2><a name="packaged"></a>Installing the Packaged Version    </h2>
		
    
<p class="pFileReference"> [package: samba-2.0.7.tgz (available on cd-distribution 
  and OpenBSD ftp mirrors)]<br>
  [ref: Samba Book available from <a href="http://www.samba.org">http://www.samba.org</a>] 
</p>
    
<p> Install the package using pkg_add</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap># <b>pkg_add /<font color="#0000FF">[path-to-package]</font>/samba-2.0.7.tgz 
      </b></td>
  </tr>
</table>
<p>The samba package will be installed and you may wish to copy one of the sample 
  configuration files as a starter for your samba setup. For example:</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap># <b>cp /usr/local/lib/samba/smb.conf.sample /etc/samba/smb.conf 
      </b></td>
  </tr>
</table>

<p>The quickest way to start samba is to launch the daemons manually:</p>
    
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap># <b>/usr/local/sbin/smbd -D</b> <br>
      # <b>/usr/local/sbin/nmbd -D</b> </td>
  </tr>
</table>
<p> Although we don't want to be frustrated with having to do that manually everytime 
  we start the computer, it is a good way to test whether the installation files 
  did get installed. </p>
<p>(note that samba-2.2.1a in OpenBSD 3.0 locates the smbd/nmbd files in /usr/local/libexec)</p>

<h2><a name="service"></a>Starting samba as a server service </h2>
    
    
<p class="pFileReference">[ref: ../ports/net/samba/files/README.OpenBSD]</p>
<p>There are at least three different methods available for starting the samba 
  daemons (smbd, and nmbd) The two most appropriate for starting the server at 
  each boot process is a scripting addition or configuring inetd. The BSDish scripting 
  is adding instructions to the /etc/rc.local file, System V'sh solutions create 
  a separate startup script. </p>
<p class="pFileReference">Edit the <a href="rc.conf.htm#rc.conf.local">/etc/rc.conf.local</a> 
  file to include in <a href="rc.conf.htm#Section2">Section 2</a> the following 
  lines:</p>
<table width="80%" border="0" class="pScreenOutput">
  <tr> 
    <td nowrap>smbd=YES<br>
      nmbd=YES </td>
  </tr>
</table>
<p class="pFileReference"> Edit: /etc/rc.local. </p>
<p><b>After</b> the 'starting local daemons' <b>and before</b> the following echo 
  '.', Insert the following instructions to the /etc/rc.local file: </p>
<table width="80%" border="0" class="pScreenOutput">
  <tr> 
    <td nowrap class="pScreenOutput"> 
      &nbsp;&nbsp; <b>echo -n 'starting local daemons:'</b><br>
      &nbsp;&nbsp;# [ ... stuff left out ... ]
    </td>
  </tr>
  <tr> 
    <td nowrap class="Code"> <p class="Code"><br>
        if [ -f /etc/samba/smb.conf ]; then<br>
        &nbsp;&nbsp;&nbsp;&nbsp;if [ X&quot;${smbd}&quot; != X&quot;NO&quot; -a 
        -x /usr/local/libexec/smbd ]; then<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo -n ' smbd'; /usr/local/libexec/smbd 
        -D<br>
        &nbsp;&nbsp;&nbsp;&nbsp;fi<br>
        &nbsp;&nbsp;&nbsp;&nbsp;if [ X&quot;${nmbd}&quot; != X&quot;NO&quot; -a 
        -x /usr/local/libexec/nmbd ]; then<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo -n ' nmbd'; /usr/local/libexec/nmbd 
        -D<br>
        &nbsp;&nbsp;&nbsp;&nbsp;fi<br>
        fi</p>
      <p class="Code">&nbsp;</p>
    </td>
  </tr>
  <tr> 
    <td nowrap class="pScreenOutput"> 
      <p class="pScreenOutput">&nbsp;&nbsp;# [ ... stuff left out ... ]</p>
      <p class="pScreenOutput"> &nbsp;<b>&nbsp; echo '.'</b> </p>
    </td>
  </tr>
</table>
<p>&nbsp; </p>
<p>Now each restart of the machine will automatically check to see whether we 
  have enabled samba in the configuration file (rc.conf.local) and then start 
  the smbd, and nmbd daemons. If we wish to disable samba we can simply change 
  smbd=YES to smbd=NO ; nmbd=YES to nmbd=NO</p>
    

<h3><a name="inetd"></a>Starting samba as an inetd service</h3>

    <p>
      If you chose the inetd path then two files /etc/services and /etc/inetd.conf need to be updated. Note that to
      only use the rc.local update or this configuration but do not use both as it may cause problems further down the
      line for you.
    </p>
    
<p> /etc/services : change this file to include the following lines</p>
    
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="Code">netbios-ssn&nbsp;&nbsp;&nbsp; 139/tcp <br>
      netbios-ns&nbsp;&nbsp;&nbsp;&nbsp; 137/udp </td>
  </tr>
</table>
<p> /etc/inetd.conf : change this file to update the lines referring to the above 
  ports</p>
    
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="Code">netbios-ssn&nbsp;&nbsp;&nbsp; stream tcp nowait root 
      /usr/local/libexec/smbd <br>
      netbios-ns&nbsp;&nbsp;&nbsp;&nbsp; dgram udp wait root /usr/local/libexec/nmbd 
    </td>
  </tr>
</table>
<p>
      Of course one advantage of inetd is you don't have to restart the computer to get things up and running. Just
      send a -HUP signal to inetd and samba will be started.
    </p>

<h2><a name="test"></a>Testing the installation</h2>
    
    
<p class="pFileReference"> [Config file: /etc/samba/smb.conf ]<br>
  [Utility: smbclient]</p>
    
<p> A quick diagnostic test to verify whether the nmbd/smbd daemons are working 
  is to use the <i>smbclient</i> program, one of the tools supplied with the samba 
  suite of programs. smbclient attempts a client connection to an smb server, 
  so one simple test is to attempt a connection to our localhost smb server.</p>
    
<p class="Code"> # <b>smbclient -U% -L localhost </b> </p>
    
<p> The -U% specifies attempt the connection with User % (% expands to be root, 
  or current login) -L specifies the hostname to connect to (localhost.) The above 
  command should show the Shares available on the localhost server (ipc$ et. al.) 
  as well as other machines in the Work-group.</p>
    
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="pScreenOutput">Sharename&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      Comment <br>
      ----------&nbsp;&nbsp;&nbsp;&nbsp; -----&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ------- <br>
      IPC$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IPC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      IPC Service (Samba Server) <br>
      &nbsp; <br>
      Server&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      Comment <br>
      ---------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ------- <br>
      OPENBSDBOX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Samba 
      Server <br>
      &nbsp; </td>
  </tr>
</table>
<p>In the above example, the returned displays the Server OPENBSDBOX as being 
  in the smb workgroup. OPENBSDBOX is the short-name for this sample localhost.</p>
<p>Basic configuration file settings that can be used to approximate the initial 
  part of what your samba server should look like to to set the following settings 
  in the configuration file /etc/samba/smb.conf</p>
    
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap>workgroup &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 
      <b>myworkgroup</b> <br>
      encrypt passwords &nbsp;= <b>yes</b> <br>
      smb passwd file &nbsp;&nbsp;&nbsp;&nbsp;= <b>/etc/samba/smbpasswd</b> <br>
      unix password sync = <b>yes</b> <br>
      passwd program &nbsp;&nbsp;&nbsp;&nbsp;= <b>/usr/bin/passwd %u </b><br>
      interfaces <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip_for_eth0 
      ip_for_eth1 </b></td>
  </tr>
</table>
<p><b>ip_for_eth0</b> and <b>ip_for_eth1</b> - These are the ip-addresses for 
  the Ethernet cards on your server that you wish Samba to service through. For 
  example, if you had one ethernet card for your LAN (eth0:192.168.101.5) and 
  one ethernet card for your external connection (ISP eth1:202.123.44.1) then 
  you can specify something like:</p>
<p class="Code">interfaces 192.168.101.5</p>
<p>This would allow machines on your local LAN access to the samba server, but 
  not machines connected through any other devices.</p>
<p>Encrypt Passwords: All the clients i am using with my samba server will be 
  Win98 or Win2000 and i want passwords encrypted when passed between the server 
  and machines in preparation for when the sites go live on the internet. Likewise, 
  i don't want to spend the time setting up the script to modify all the clients 
  to send clear-text passwords. </p>
<a name="swat">
<h2> Setting up SWAT - the Samba Web Administration Tool </h2>
</a>    
    
<p class="pFileReference"> [Config file: /etc/services ]<br>
  [Config file: /etc/inetd.conf ]</p>
    <p>
      SWAT provides a GUI based tool for modifying samba's configuration file /etc/samba/smb.conf. Unfortunately it can
      also cause disastrous things such as wipe the configuration file (actual experience.) Following are the steps
      required to configure swat, which is installed but not enabled by the samba installation.
    </p>
    
<p class="pFileReference"> Edit /etc/services to include the following line </p>
    
<table class="pScreenOutput" width="800">
  <tr> 
    <td nowrap class="pScreenOutput">swat&nbsp;&nbsp;&nbsp;&nbsp; 901/tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      # Samba Web Administration Tool </td>
  </tr>
</table>
<p class="pFileReference"> Edit /etc/inetd.conf to include the following lines 
</p>
    
<table class="pScreenOutput" width="800">
  <tr>
    <td nowrap class="pScreenOutput"> swat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stream&nbsp;&nbsp;&nbsp; 
      tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nowait.400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      root&nbsp;&nbsp;&nbsp;&nbsp; /usr/local/sbin/swat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swat 
    </td>
  </tr>
</table>
    
<p> Restart the inetd daemon so it can re-read the changes you have made to the 
  /etc/inetd.conf file.</p>
    
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="Code"># <b>kill -HUP `cat /var/run/inetd.pid` </b></td>
  </tr>
</table>
<p> You should now be able to point a browser (for example Windows/Internet Explorer) 
  at your webserver:901 to configure samba using the SWAT GUI interface instead 
  of having to manually edit through the smb.conf file. </p>
<p>Security Concern. I think swat sends passwords cleartext. You should be aware 
  of this problem if concerned about potential security compromises by using swat.</p>

<h2><a name="smbadduser"></a>Adding Users </h2>
    
    
<p class="pFileReference"> [Config file: /etc/samba/smbusers ]<br>
  [Config file: /etc/samba/smbpasswd] <br>
  [Utility: /usr/local/bin/smbpasswd ]</p>


    
<p> To make sure that you can access the smb shares from other clients, make sure 
  you add the smb access users to the /etc/samba/smbusers and the /etc/samba/smbpasswd 
  file. I find this necessary because I specify the use of encrypted passwords 
  for authentication. </p>
    
<p class="pScreenOutput"> smbpasswd -a login-id </p>
    <p>
      For example:
    </p>
    
<p class="Code"> # <b>smbpasswd -a samt </b> </p>
    <p>
      More Information:
    </p>
    <p>
      Run by root, the smbpasswd program can "-a" add a new user to the smbpasswd file. This is also a neat trick for
      finding out where the smbpasswd is 'supposed' to be located.
    </p>
    
<p> Other useful options: </p>
    
<table class="pScreenOutput" width="800">
  <tr> 
    <td nowrap class="pScreenOutput">-x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      delete the user information <br>
      -d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; disable the user account 
      <br>
      -e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enable a disabled account, 
      no effect if account currently enabled <br>
      -r&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remote machine on which 
      smb access is to be changed. </td>
  </tr>
</table>


<h2><a name="control"></a>Controlling the Server</h2>
    
    
<p>The following shell script (based on ndc.sh) is a quick hack for starting/stopping 
  the Samba servers. As I have had to play around a lot with the configuration 
  files, restarting the servers, it is somewhat useful to have a script to cut 
  down the number of keystrokes.</p>
<table width="80%" border="0" cellpadding="0" cellspacing="0" class="dns">
  <tr>
    <td> <pre>#!/bin/sh
# /usr/sbin/sambactl
#	based on $OpenBSD: ndc.sh,v 1.11 1998/07/07 22:05:15 millert Exp $
USAGE='echo \
	"usage: $0 \
 (start|stop|restart) \
	 ... \
	"; exit 1'
PATH=/usr/sbin:/bin:/usr/bin:$PATH
RUNNINGS=0
RUNNINGN=0
PIDS=0
PIDN=0
SMBD_CMD="/usr/local/libexec/smbd -D"
NMBD_CMD="/usr/local/libexec/nmbd -D"
PS="Unknown"
PS="Samba is NOT Running"
test `ps ax | grep smbd | grep -v grep | wc -l` != 0 && {
        RUNNINGS=1
        PIDS=`ps ax | grep smbd | grep -v grep | awk '{ print $1 }'`
        PS="Samba is Running"
}

test `ps ax | grep nmbd | grep -v grep | wc -l` != 0 && {
        RUNNINGN=1
        PIDN=`ps ax | grep nmbd | grep -v grep | awk '{ print $1 }'`
        PS="Samba is Running"
}

#case $ARG in
#start|stop|restart|status)
#	;;
#*)
#	[ $RUNNINGS -ne 0 -o $RUNNINGN -ne 0 ] && {
#		echo "$PS"
#        echo "$USAGE"
#		exit 1
#	}
#esac

for ARG
do

	case $ARG in
	status)	echo "$PS smbd:$PIDS nmbd:$PIDN";;
	start)
		[ $RUNNINGS -eq 1 -a $RUNNINGN -eq 1 ] && {
			echo "Samba (pid $PIDS $PIDN) already running"
			continue
		}

            $NMBD_CMD && $SMBD_CMD && {
			sleep 5
			echo "Samba Server Started"
		}
		;;
	stop)
		[ $RUNNINGS -eq 0 -a $RUNNINGN -eq 0 ] && {
			echo "$0: stop: Samba Server not running"
			continue
		}
		kill $PIDS && kill $PIDN && {
			sleep 5
			echo "Samba Server Stopped"
		}
		;;
	restart)
		[ $RUNNINGN -eq 1 -a $RUNNINGS -eq 1 ] && {
            echo "Samba Server Stopping ..."
			kill $PIDS && kill $PIDN && sleep 5
		}
        echo "Samba Server Starting ..."
		$SMBD_CMD && $NMBD_CMD && {
			echo "Samba Server Restarted"
		}
		;;
	*)	eval "$USAGE";;
	esac
done
test -z "$ARG" && {
    echo "$PS"
    eval "$USAGE"
}
exit 0</pre>
    </td>
  </tr>
</table>
<h2> <a name="winNT"></a>Co-habiting with NT Server - Primary Domain Controller </h2>
 
<p> As my environments&nbsp;is OpenBSD/Samba joining an existing Windows NT Primary 
  Domain Controller (PDC) I need to maintain authentication on one server to minimise 
  work-load. For this discussion we will use DEMO_DOMAIN as the domain and PDC_SERVER 
  as the name of the Primary Domain Controller (Windows NT 4.0x server) server. 
</p>
<p>The following are the basic steps for enabling NT Domain authentication for 
  Samba connections. </p>
    
<ol type="1">
  <li> On the PDC, Manually add the Samba Server netbios name as an NT Server/Workstation 
  </li>
  <li> Join the Domain from the samba server using smbpasswd -j DEMO_DOMAIN -r 
    PDC_SERVER </li>
  <li> Modify smb.conf to specify encrypted passwords and security=domain </li>
  <li> Restart the Samba Server </li>
</ol>
     
<h3><a name="winNTadd"></a> Adding the Samba Server to the Primary Domain Controller </h3>
 
<p> On the <b>Win NT (4.0 ) PDC Server</b>, start the Administrator -&gt; Server 
  Manager program. Add the OpenBSD/Samba server you have installed as a "Windows 
  NT Workstation or Server" </p>
<p>On the <b>Win2000 Advanced Server PDC</b>, start the Administrator -&gt; Active 
  Directory Users and Computers. Select the Domain you will be adding the OpenBSD/Samba 
  server to. Add a new computer and make sure you select the check-box &quot;Allow 
  pre-Windows 2000 computers to use this account&quot;</p>
    
<p> For the name of the OpenBSD/Samba server, use the NetBIOS name you have either 
  specified in /etc/samba/smb.conf, or use the short-name of the server (OPENBSDBOX 
  for this example). </p>
	
<a name="winNTjoin"> 
<h3> Joining the Samba server to the Primary Domain Controller </h3>
</a> 
<p>
      This only works if the OpenBSD/Samba server has been 'installed' into the domain as mentioned above, so make sure
      that you have followed the above step and verified the OpenBSD/Samba server is a valid 'NT Workstation or
      Server.'
    </p>
    
<p> From the OpenBSD/Samba machine join the Primary Domain by using the smbpasswd 
  "join" facility</p>
    
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="Code"># smbpasswd -j DEMO_DOMAIN -r PDC_SERVER </td>
  </tr>
</table>
<a name="winNTupdate"> 
<h3> Updating /etc/samba/smb.conf </h3>
</a> 
<p>
      To complete joining the Domain, we need to make a few configuration changes. (a) we need to tell Samba to use the
      Primary Domain Controller for authentication, and (b) We need to use encrypted passwords. Windows NT sp3 and
      greater default to using encrypted password transmission.
    </p>
    
<p class="pFileReference">File /etc/samba/smb.conf</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="pScreenOutput">domain controller = PDC_SERVER <br>
      encrypt passwords = yes </td>
  </tr>
</table>
<p> Restart the samba server and user connections will now be verified through 
  the Windows NT Domain Controller. Note that users still need a valid account 
  on the server if user directories are expected. </p>
<h2> <a name="sambaPDC"></a>Authentication for NT, Win9X Workstations</h2>
<p>[ref: Samba-2.2.2/docs/Samba-HOWTO-Collection.pdf]</p>
<p>With later versions of Samba (2.2.2) we are able to use the OpenBSD/Samba combination 
  to authenticate users for a LAN comprising Windows NT and Win9X clients. In 
  this scenario, your OpenBSD/Samba server is the Primary Domain Controller (Windows 
  Speak) and provides authentication for your Windows clients.</p>
<p>By configuring your clients to forcibly join the domain, you can ensure all 
  workstation users must be validated from the OpenBSD/Samba server.</p>
<p>We may want to do this if we do not have a legitimate (Microsoft) Windows Server 
  that can authenticate as the primary domain controller. </p>
<p>The Samba distribution actually comes with a HOWTO for this task (Chapter 8. 
  How to Configure Samba 2.2 as a Primary Domain Controller) </p>
<p>In short, we set the configurations (in a working Samba system):</p>
<ul>
  <li>Configuration File settings</li>
  <li>Machine Account Creation</li>
</ul>
<h3><a name="sambaPDCconf"></a>Configuration File settings</h3>
<p>To configure your Samba server to provide user authentication you will need 
  to include the following.</p>
<table width="80%" border="0" class="dns">
  <tr> 
    <td> 
<pre>[global]
workgroup = myworkgroup

<b>security</b> = user
<b>domain master</b> = yes
<b>local master</b> = yes
<b>domain logons</b> = yes<br>
<b>add user script</b> = /etc/samba/my_add_user %u</pre>
    </td>
  </tr>
  <tr> 
    <td> 
      <div align="center">Diagram - portion of [global]</div>
    </td>
  </tr>
</table>
<p>Security is set to user (not domain as you would initially expect.) The server 
  is set to be the domain master and service domain logons which is where we will 
  configure user authentication.</p>
<h3><a name="sambaPDCclient"></a>Machine Account Creation.</h3>
<p>The <i>add user script</i> will be used by Samba to add a machine account for 
  joining NT Workstations to the domain. This script will create an /etc/passwd 
  entry using the client workstation's netbios name. At this writing (Samba 2.2.2) 
  Samba requires the /etc/passwd entry before it can create a Samba account for 
  the workstation.</p>
<p>Since OpenBSD typically does not allow workstations to have the dollar character 
  &quot;$&quot; in a user-id we need to modify the useradd source to allow the 
  dollar character &quot;$&quot;. Of course, you can manually create the accounts 
  and not need to change the source code. Unix, including OpenBSD, readily allows 
  the $ sign, but the user creation programs do not normally allow the use of 
  dollar signs for a number of practical reasons. </p>
<h2><a name="stunnel"> Using stunnel to secure SWAT password communication</a> </h2>
 
<p class="pFileReference"> package: stunnel-3.8.tgz <br>
  package: openssl (installed either as source build or ssl2?) <br>
  [ref: <a href="http://www.openbsd.org/faq/faq10.html#10.6">OpenBSD FAQ 10.6 
  Setting up a Secure HTTP Server with SSL</a>]<br>
  [local: <a href="openssl.htm">openss# - Secured Communications</a>]<br>
  [ref: Samba Book] </p>
    
<p>
      Samba can be set up to communicate exclusively through SSL, which is great but seems to be problematically
      difficult (as in real difficult) to roll out on a WinX environment. By at least forcing SWAT communications to
      use SSL then we add one level of security ? Using information available from the Samba site and the OpenBSD FAQ,
      I have generated this step-by-step list for using SSL with SWAT under OpenBSD (installation with 2.7)
    </p>
    <p>
      1. install the stunnel package
    </p>
    
<p class="Code"> # <b>pkg_add /<font color="#0000FF">[location-of-packages]</font>/stunnel-3.8.tgz 
  </b> 
<p> After stunnel is installed, you have to create a server certificate and put 
  the result in /etc/ssl/private/stunnel.pem. For more information on how to create 
  certificates, read ssl(8). For more information on stunnel, read stunnel(8).</p>
<p> 2. Prepare certificate for stunnel. According to samba doc's stunnel documentation 
  says that a blank line is needed between private key and certificate and another 
  blank line at the end of the file (make sure you have created the server certificates 
  per references above.) </p>
<table border="0" width="800" class="Code">
  <tr>
    <td nowrap class="Code"># <b>echo "" &gt; ~/blankline.txt</b> <br>
      # <b>cat /etc/ssl/private/server.key ~/blankline.txt /etc/ssl/server.crt 
      \<br>
      &nbsp;&nbsp;~/blankline.txt &gt; /etc/ssl/stunnel.pem</b></td>
  </tr>
</table>
<p> 3. Move the stunnel.pem file to a standardised location </p>
<table border="0" width="800" class="Code">
  <tr> 
    <td nowrap class="Code"># <b>mv /etc/ssl/stunnel.pem /etc/ssl/private </b></td>
  </tr>
</table>
<p> 4. Set the file permissions so no root have no access to the file </p>
<table border="0" width="800" class="Code">
  <tr> 
    <td nowrap class="Code"># <b>chmod 700 /etc/ssl/private/stunnel.pem </b></td>
  </tr>
</table>
<p> 5. Remove swat entry from inetd.conf (restart inetd) </p>
<table border="0" width="800" class="Code">
  <tr> 
    <td nowrap class="Code"># <b>kill -HUP `cat /var/run/inetd.pid` </b></td>
  </tr>
</table>
<p> 6. Start stunnel </p>
<table border="0" width="800" class="Code">
  <tr> 
    <td nowrap class="Code"># <b>/usr/local/sbin/stunnel -p /etc/ssl/private/stunnel.pem 
      -d 901 -l&nbsp; /usr/local/sbin/swat -- swat </b></td>
  </tr>
</table>
<p> 7. We now include stunnel into the configuration for SWAT</p>
<p class="pFileReference">Edit the <a href="rc.conf.htm" class="anchBlue">/etc/rc.conf.local</a> 
  file to include the following line:</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="pScreenOutput">stunnel_swat=YES </td>
  </tr>
</table>
<p class="pFileReference"> Edit: /etc/rc.local. </p>
<p><b>After</b> the 'starting local daemons' <b>and before</b> the following echo 
  '.', Insert the following instructions to the /etc/rc.local file:</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="pScreenOutput">&nbsp; <b>echo -n 'starting local daemons:'</b></td>
  </tr>

  <tr> 
    <td nowrap class="Code">&nbsp;&nbsp;# [ ... stuff left out ... ] 
      <p class="Code"> <br>
        &nbsp;&nbsp; if [ -f /etc/samba/smb.conf ]; then<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if [ X"${smbd}" = X"YES" -a X"${nmbd}" 
        = X"YES" -a X"${stunnel_swat}" = X"YES" -a -x /usr/local/sbin/stunnel 
        ]; then<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo -n ' 
        stunnel_swat';&nbsp;&nbsp;&nbsp;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /usr/local/sbin/stunnel 
        -p /etc/ssl/private/stunnel.pem -d 901 -l&nbsp; /usr/local/sbin/swat -- 
        swat<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fi<br>
        &nbsp;&nbsp; fi</p>
      <p class="Code"></p>
      </td>
  </tr>
  <tr> 
    <td nowrap class="pScreenOutput"> 
      <p class="pScreenOutput">&nbsp;&nbsp;# [ ... stuff left out ... ]</p>
      <p class="pScreenOutput"> &nbsp;<b>&nbsp; echo '.' </b></p>
    </td>
  </tr>
</table>

<p>Now each restart of the machine will automatically check to see whether we 
  have enabled stunnel for swat in the configuration file (rc.conf) and then start 
  the stunnel. If we wish to disable stunnel for swat we can simply change stunnel_swat=YES 
  to stunnel_swat=NO.</p>
<p> Connect to the <a href="apache.htm#securessl">SSL enabled site</a> using https://your_sambaserver:901 
  and accept the certificate. </p>
<h2><a name="kernel"></a>Optimizing the Kernel</h2>
<p class="pFileReference">[ref: afterboot(8), config(8), options(4), boot_config(8), 
  OpenBSD FAQ: Kernel Configuration] <br>
  [ref: CD1:src.tar.gz]</p>
<p>This is not necessary to get samba running. Kernel optimization is only if 
  you percieve some performance problem with your samba configuration and you 
  don't have a critical configuration while you experiment.</p>
<p>I've seen a number of discussions recommending that you can improve the performance 
  of OpenBSD with Samba by increasing the number of NMBCLUSTERS for the Kernel. 
  The specific option is noted here and I go into further discussions on making 
  the changes. It seems that the GENERIC kernel is more optimised for streaming 
  based protocol communication than packet/ack protocols.</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="pScreenOutput">option &quot;NMBCLUSTERS=8192&quot;</td>
  </tr>
</table>
<p>From the man page:</p>
<p class="pScreenOutput"><b>option NMBCLUSTERS=value</b></p>
<p class="pScreenOutput"> Size of kernel mbuf cluster map, mb_map, in CLBYTES-sized 
  logical pages. Default on most ports is 256 (512 with &quot;option GATEWAY&quot;). 
  See /usr/include/machine/param.h for exact default information. Increase this 
  value if &quot;mb_map full&quot; messages appear.</p>
<p>Note that the quotation marks are significant (use them) as the option is actually 
  a compiler directive.</p>
<p>A simplified process is listed below, for more details see the man and FAQ 
  references above (config 8, options 4).</p>
<p>After decompressing the OpenBSD source tree onto your hard-disk (/usr/src), 
  do the following: </p>
<p class="Code"># cd /usr/src/sys/arch/<b>[$ARCH]</b>/conf </p>
<p>This moves us into the custom configurations for your hardware architecture. 
  Doing a listing in this directory will give you a sample of machine configurations. 
  On my I386 architecture an ls will indicate</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="Code"># ls -al</td>
  </tr>
</table>
<table width="80%" border="0" cellpadding="0" cellspacing="0" class="pScreenOutput">
  <tr> 
    <td rowspan="3" class="pScreenOutput">&nbsp;</td>
    <td class="pScreenOutput" width="12%">CVS</td>
    <td class="pScreenOutput" width="13%">GANDALF</td>
    <td class="pScreenOutput" width="24%">LUCIFIER</td>
    <td class="pScreenOutput" width="13%">OPRAH</td>
    <td class="pScreenOutput" width="19%">RAMDISKB</td>
    <td class="pScreenOutput" width="14%">SARUMAN</td>
  </tr>
  <tr> 
    <td class="pScreenOutput" width="12%">DISKLESS</td>
    <td class="pScreenOutput" width="13%">GENERIC</td>
    <td class="pScreenOutput" width="24%">Makefile.i386</td>
    <td class="pScreenOutput" width="13%">PETRA</td>
    <td class="pScreenOutput" width="19%">RAMDISKC</td>
    <td class="pScreenOutput" width="14%">WALDORF</td>
  </tr>
  <tr> 
    <td class="pScreenOutput" width="12%">ELBERETH</td>
    <td class="pScreenOutput" width="13%">HERMES</td>
    <td class="pScreenOutput" width="24%">NETTAN</td>
    <td class="pScreenOutput" width="13%">RAMDISK</td>
    <td class="pScreenOutput" width="19%">RAMDISK_CD</td>
    <td class="pScreenOutput" width="14%">&nbsp;</td>
  </tr>
</table>
<p>Make a copy of the Generic kernel configuration. Remember that this is the 
  most tested configuration, so lets not stray too far from 'working' configuration.</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="Code"># cp GENERIC <b>MYCUSTOMKERNEL</b></td>
  </tr>
</table>
<p>We can now edit the configuration file <b>MYCUSTOMKERNEL</b> to include the 
  directive for NMBCLUSTERS.</p>
<p class="pFileReference">Edit: /usr/src/arch/<b>[architecture]</b>/conf/<b>MYCUSTOMKERNEL</b> 
  to include:</p>
<p class="pFileReference">&nbsp;</p>
<p class="pScreenOutput">option &quot;NMBCLUSTERS=8192&quot;</p>
<p>After you have saved the above modifications we can now configure the kernel 
  compilation, and make the kernel.</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="Code"># config <b>MYCUSTOMKERNEL</b> </td>
  </tr>
  <tr> 
    <td nowrap class="pScreenOutput">Don't forget to run "make depend"</td>
  </tr>
  <tr> 
    <td nowrap class="Code"># cd ../compile/<b>MYCUSTOMKERNEL</b> </td>
  </tr>
  <tr> 
    <td nowrap class="Code"># make depend &amp;&amp; make</td>
  </tr>
</table>
<p>To use the kernel copy the kernel to the root directory and make it available 
  during boot time.</p>
<table width="80%" border="0" class="Code">
  <tr> 
    <td nowrap class="Code"> # cp /bsd /bsd.working</td>
  </tr>
  <tr>
    <td nowrap class="Code"># cp /usr/arch/[architecture]/compile/<b>MYCUSTOMKERNEL</b>/bsd 
      /<b>bsd.nmb</b> </td>
  </tr>
</table>
<p>We first make a backup of the existing/generic kernel (the docs says that most 
  use a sequence like bsd.1 bsd.2 and I'm only using named kernels above as a 
  demonstration.) </p>
<p>Next I copy the customised kernel into the root partition so boot can find 
  it. In our experimental case I do not make it the default kernel.</p>
<p>When you restart your server and get to the boot prompt, we can specify the 
  new kernel we wish to try.</p>
<p class="pScreenOutput">&gt;&gt; OpenBSD i386 BOOT 1.36</p>
<p class="pScreenOutput">boot &gt; <b>bsd.nmb</b></p>
<p>The boot messages will scroll through your screen and you get to the login 
  prompt. After login in you should see a display of your new kernel.</p>
<table width="80%" border="0" class="pScreenOutput">
  <tr> 
    <td nowrap class="pScreenOutput"> 
      Last login: (date) from (ip-address) <br>
      OpenBSD 2.8 (<b>MYCUSTOMKERNEL</b>) #1: (date-of-compilation) 
      <br>
      Welcome to OpenBSD: The proactively secure Unix-like 
        operating system.
    </td>
  </tr>
</table>
<p>If you find the new kernel behaves as expected, without causing other problems 
  on your system, then you can copy the new kernel over the default boot kernel. 
  (Remember to have first backed up your working kernel)</p>
<p class="Code"># cp <b>/bsd.nmb</b> /bsd</p>
<p>Please take the time to read the FAQ and afterboot(8) man pages before you 
  continue. </p>
<h4>More Kernel Options ?</h4>
<p>The below kernel options may be of interest to you, remember that I'm as much 
  in the dark about these things as you are and you're as likely to kill your 
  machine with my advice as you are to get things working.</p>
<p>From the man page:</p>
<table width="80%" border="0" class="pScreenOutput">
  <tr> 
    <td class="pScreenOutput"> 
      <p class="pScreenOutput"><b>option BUFCACHEPERCENT=integer</b></p>
      <p class="pScreenOutput">Percentage of RAM to use as a file system buffer. 
        It defaults to 5.</p>
      <p class="pScreenOutput">&nbsp;</p>
      <p class="pScreenOutput"><b>option QUOTA</b></p>
      <p class="pScreenOutput"> Enables kernel support for file system quotas. 
        See quotaon(8), edquota(8), repquota(8), and quota(1) for details. Note 
        that quotas only work on &quot;ffs&quot; file systems, although rpc.rquotad(8) 
        permits them to be accessed over NFS.</p>
    </td>
  </tr>
</table>
<p>Note that option QUOTA is already configured in the /usr/src/sys/conf/GENERIC 
  file which is 'included' in the GENERIC configuration. BUFCACHEPERCENT is of 
  interest in my configuration where the OpenBSD Samba server is primarily functioning 
  as a file server and we wish to increase responsiveness to a plethora of multimedia 
  files used by our students.</p>
<h2>Getting at Windows Shares</h2>
<p class="pFileReference">package: Sharity-light_1_2.tgz</p>
<p>Sometimes you want to access the Windows (eg. Win95, Win98, Win2000, WinNT) 
  file share from within the Unix box. Sharity-Light is similar to the Linux only 
  smbfs (smbmount, smbumount) which allows the user to mount a Windows file-share 
  onto your unix file-system.</p>
<p><a href="http://www.obdev.at/Products/Sharity.html" class="anchBlue">http://www.obdev.at/Products/Sharity.html</a></p>
<p>Check out the developer's website <a href="http://www.obdev.at/Products/Sharity.html" class="anchBlue">above</a> 
  for more information on the &quot;light&quot; version and their commercial product.</p>
<p></p>
<h2><a name="author"></a>Author and Copyright</h2>
<p>Copyright (c) 2000/1/2 Samiuela LV Taufa. All Rights Reserved.</p>

<p>I reserve the right to be totally incorrect even at the best advice of betters. In other words, I'm probably wrong in enough places for you to call me an idiot, but don't 'cause you'll hurt my sensibilities, just tell me where I went wrong and I'll try again.</p>

<p>You are permitted and encouraged to use this guide for fun or for profit as you see fit. If you republish this work in what-ever form, it would be nice (though not enforceable) to be credited.</p>

<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tr>
    <td class="block" valign="MIDDLE" width="100%" bgcolor="#cccccc"><strong> 
      <p class="block">Samba - sharing Files and Printers with Microsoft Windows</p>
      </strong></td>
  </tr>
</table>
<p><font color="#808080" face="sans-serif" size="-2"><strong>Copyright&nbsp; &copy; 
  2000/1/2
<a href="http://www.nomoa.com">NoMoa.COM</a> All rights reserved.</strong></font></p>
  
</body>
</html>

